plot(y)
fit <- lm(y ~ x+I(x^2)+I(x^3)+I(x^4)+I(x^5))
fit
x <- seq(-10, 10, 0.1)
y <- sin(x)#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(y ~ x+I(x^2)+I(x^3)+I(x^4)+I(x^5))
fit
lines(fit)
abline(fit)
plot(fit$coefficients)
fit <- lm(y ~ x+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6)+I(x^7)+I(x^8)+I(x^9))
fit
plot(fit$coefficients)
fit$coefficients
fit$coefficients[0]
fit$coefficients[1]
p <- function(x, coeff){
return(coeff[1]*x+coeff[2]*x^2+coeff[3]*x^3+coeff[4]*x^4+coeff[5]*x^5+coeff[6]*x^6+coeff[7]*x^7+coeff[8]*x^8+coeff[9]*x^9)
}
plot(p(x, fit$coefficients))
lines(p(x, fit$coefficients))
x <- seq(-10, 10, 0.1)
y <- sin(x)#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(y ~ x+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6)+I(x^7)+I(x^8)+I(x^9))
fit
p <- function(x, coeff){
return(coeff[1]*x+coeff[2]*x^2+coeff[3]*x^3+coeff[4]*x^4+coeff[5]*x^5+coeff[6]*x^6+coeff[7]*x^7+coeff[8]*x^8+coeff[9]*x^9)
}
lines(p(x, fit$coefficients))
x <- seq(-3, 3, 0.1)
y <- sin(x)#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(y ~ x+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6)+I(x^7)+I(x^8)+I(x^9))
fit
p <- function(x, coeff){
return(coeff[1]*x+coeff[2]*x^2+coeff[3]*x^3+coeff[4]*x^4+coeff[5]*x^5+coeff[6]*x^6+coeff[7]*x^7+coeff[8]*x^8+coeff[9]*x^9)
}
lines(p(x, fit$coefficients))
lines(fit)
abline(fit)
lines(p(x, fit$coefficients))
x <- seq(-3, 3, 0.1)
y <- sin(x)#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(y ~ x+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6)+I(x^7)+I(x^8)+I(x^9))
fit
abline(fit)
fit <- lm(y ~ x+I(x^2)))
fit
abline(fit)
x <- seq(-3, 3, 0.1)
y <- sin(x)#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(y ~ x+I(x^2)))
fit
fit <- lm(y ~ x+I(x^2))
fit
abline(fit)
lines(p(x, fit$coefficients))
x <- seq(-3, 3, 0.1)
y <- sin(x)#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(y ~ x+I(x^2))
fit
abline(fit)
fit <- lm(y ~ x)
fit
abline(fit)
y <- sin(x)#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(y ~ x)
fit
abline(fit)
x <- seq(-3, 3, 0.1)
y <- sin(x)#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(y ~ x)
fit
abline(fit)
lines(p(x, fit$coefficients))
fit <- lm(x ~y)
fit
abline(fit)
fit <- lm(y ~x)
fit
abline(fit)
lines(p(x, fit$coefficients))
x <- seq(-3, 3, 0.1)
y <- sin(x)#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(y ~x)
fit
abline(fit)
x <- seq(-3, 3, 0.1)
y <- 2*x)#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(y ~x)
fit
x <- seq(-3, 3, 0.1)
y <- 2*x)#+rnorm(length(x), 0, 0.1)
plot(y)
x <- seq(-3, 3, 0.1)
y <- 2*x#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(y ~x)
fit
abline(fit)
fit <- lm(x ~y)
fit
abline(fit)
lines(p(x, fit$coefficients))
fit <- lm(x ~ y)
x <- seq(-3, 3, 0.1)
y <- 2*x#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(x ~ y)
fit
abline(fit)
plot(x, y)
fit <- lm(x ~ y)
fit
abline(fit)
lines(p(x, fit$coefficients))
abline(x, fit)
abline(fit)
fit <- lm(x ~ y)
fit
abline(fit)
lines(p(x, fit$coefficients))
fit <- lm(y ~ x)
fit
abline(fit)
x <- seq(-3, 3, 0.1)
y <- 2*x#+rnorm(length(x), 0, 0.1)
plot(x, y)
fit <- lm(y ~ x)
fit
abline(fit)
lines(p(x, fit$coefficients))
y <- sin(x) #+rnorm(length(x), 0, 0.1)
plot(x, y)
fit <- lm(y ~ x)
fit
abline(fit)
fit <- lm(y ~ x + I(x^2))
fit
abline(fit)
lines(p(x, fit$coefficients))
lines(function(x){1.408e-17 + 3.310e-01* x^2 + 3.671e-17 * x^3})
q <- function(x){
return(1.408e-17 + 3.310e-01* x^2 + 3.671e-17 * x^3)
}
lines(q(x))
q <- function(x){
return(1.408e-17 + 3.310e-01* x^2 + 3.671e-17 * x^3)
}
lines(q(x))
q <- function(x){
return(3.310e-01* x^2 + 3.671e-17 * x^3)
}
q(2)
lines(q(x))
lines(p(x, fit$coefficients))
plot(x, y)
fit <- lm(y ~ x + I(x^2))
fit
q <- function(x){
return(3.310e-01* x^2 + 3.671e-17 * x^3)
}
q(2)
lines(q(x))
q(x)
lines(x, q(x))
q <- function(x){
return(3.310e-01* x + 3.671e-17 * x^2)
}
q(2)
q(x)
lines(x, q(x))
x <- seq(-3, 3, 0.1)
y <- sin(x) #+rnorm(length(x), 0, 0.1)
plot(x, y)
fit <- lm(y ~ x + I(x^2))
fit
q <- function(x){
return(3.310e-01* x + 3.671e-17 * x^2)
}
lines(x, q(x))
fit <- lm(y ~ x + I(x^2))
fit
plot(q)
fit <- lm(y ~ x + I(x^2))
fit
fit <- lm(y ~ x + I(x^2) + + I(x^3))
fit
q <- function(x){
return(3.310e-01 * x + 3.671e-17 * x^2 + -9.683e-02 * x^3)
}
lines(x, q(x))
plot(q)
x <- seq(-3, 3, 0.1)
y <- sin(x) #+rnorm(length(x), 0, 0.1)
plot(x, y)
fit <- lm(y ~ x + I(x^2) + + I(x^3))
fit
q <- function(x){
return(3.310e-01 * x + 3.671e-17 * x^2 + -9.683e-02 * x^3)
}
lines(x, q(x))
fit <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4))
fit
fit <- lm(y ~ x + I(x^3) + I(x^5) + I(x^7))
fit
return(3.310e-01 * x + -1.660e-01 * x^3 + 8.037e-03 * x^5 + -1.506e-04 * x^7)
q <- function(x){
return(3.310e-01 * x + -1.660e-01 * x^3 + 8.037e-03 * x^5 -1.506e-04 * x^7)
}
lines(x, q(x))
x <- seq(-3, 3, 0.1)
y <- sin(x) #+rnorm(length(x), 0, 0.1)
plot(x, y)
fit <- lm(y ~ x + I(x^3) + I(x^5) + I(x^7))
fit
q <- function(x){
return(3.310e-01 * x + -1.660e-01 * x^3 + 8.037e-03 * x^5 -1.506e-04 * x^7)
}
lines(x, q(x))
q <- function(x){
return(3.310e-01 * x + -1.660e-01 * x^3)
}
lines(x, q(x))
f <- function(x){
return(2*x^3+3*x^2-4*x)
}
f_ <- function(x){
return(6*x^2+6*x-4)
}
x <- 3
a <- 1
plot(f, xlim = c(-3, 3), ylim = c(-10, 50))
lines(seq(-4, 4, 0.1), f_(seq(-4, 4, 0.1)))
abline(h = 0, v = 0, lt = 2, col = "gray")
points(a, f(a)+(f_(a)*(x-a)))
points(a, f_(a))
points(a, f(a))
plot(sin)
plot(sin, xlim = c(-6, 6))
factorial(3)
p <- function(x, a = 0, k = 5){
y <- sin(a)+cos(a)*(x-a)+(-sin(a)/2)*(x-a)+(-cos(a)/factorial(3))
}
plot(p)
p <- function(x, a = 0, k = 5){
y <- sin(a)+cos(a)*(x-a)+(-sin(a)/2)*(x-a)^2+(-cos(a)/factorial(3))*(x-a)^4
}
plot(p)
plot(p, xlim = c(-6, 6))
6%4
6%%4
der <- c(sin, cos, -sin, -cos)
der <- c(sin, cos, -sin, -cos)
der <- c(sin, cos, -sin, -cos)
der <- c(sin(x), cos(x), -sin(x), -cos(x))
der[1](0)
der[1]
p <- function(x, a = 0, k = 5){
y <- 0
der <- c(sin(a), cos(a), -sin(a), -cos(a))
for i in range(k){
p <- function(x, a = 0, k = 5){
y <- 0
der <- c(sin(a), cos(a), -sin(a), -cos(a))
for (i in range(k)){
y <- y + (der[k%%4]/factorial(k))*(x-a)^k
}
}
p(1)
p <- function(x, a = 0, k = 5){
y <- 0
der <- c(sin(a), cos(a), -sin(a), -cos(a))
for (i in range(k)){
y <- y + (der[k%%4]/factorial(k))*(x-a)^k
}
return(y)
}
p(1)
p(0)
p(2)
plot(p)
p <- function(x, a = 0, k = 5){
y <- sin(a)+cos(a)*(x-a)+(-sin(a)/2)*(x-a)^2+(-cos(a)/factorial(3))*(x-a)^4
}
plot(p)
plot(p, xlim = c(-6, 6))
p <- function(x, a = 0, k = 5){
y <- 0
der <- c(sin(a), cos(a), -sin(a), -cos(a))
for (i in range(k)){
y <- y + (der[k%%4]/factorial(k))*(x-a)^k
}
return(y)
}
p(1:10)
debug(p)
p <- function(x, a = 0, k = 5){
y <- 0
der <- c(sin(a), cos(a), -sin(a), -cos(a))
for (i in range(k)){
y <- y + (der[k%%4]/factorial(k))*(x-a)^k
}
return(y)
}
p(1:10)
debug(p)
p(1:10)
der[k%%4]
(x-a)
(x-a)^k
(der[k%%4]/factorial(k))
undebug(p)
e <- function(x, k = 10){
e <- rep(1, length(x))
for (i in range(length(x))){
for (j in range(k)){
e[i] <- e[i] + (1/factorial(k))*x[i]^k
}
}
}
e(1)
return(e)
e <- function(x, k = 10){
e <- rep(1, length(x))
for (i in range(length(x))){
for (j in range(k)){
e[i] <- e[i] + (1/factorial(k))*x[i]^k
}
}
return(e)
}
e(1)
exp(1)
plot(e)
8*0.4 + 6*0.6
9*0.4 + 6*0.6
8*0.4 + 6*0.6
9*0.4 + 5.5*0.6
8.5*0.4 + 5.5*0.6
8.5*0.4 + 5.6*0.6
8*0.4 + 6*0.6
f <- function(x){
exp(-x)*((1/2)*exp(x)-1/2)
}
plot(f)
plot(f, xlim = c(-10, 10))
plot(y, xlim = c(-10, 10), col = "red", lty = 2)
plot(y, xlim = c(-10, 10), col = "red", lt = 2)
y <- function(x){
exp(-x)*((1/2)*exp(x)-1/2)
}
plot(y, xlim = c(-10, 10), col = "red", lt = 2, add = TRUE)
plot(y, xlim = c(-10, 10), col = "red", lt = 2, add = TRUE, lw = 2)
f <- function(x){
exp(-x)*((1/2)*exp(x)-1/2)
}
plot(f, xlim = c(-10, 10))
y <- function(x){
exp(-x)*((1/2)*exp(x)-1/2)
}
plot(y, xlim = c(-10, 10), col = "red", lt = 2, add = TRUE, lw = 2)
8*0.4 + 6*0.6
f <- function(x){
exp(-x)*((1/2)*exp(x)-1/2)
}
plot(f, xlim = c(-10, 10))
y <- function(x){
1/2 - 1/2 * exp(-x)
}
plot(y, xlim = c(-10, 10), col = "red", lt = 2, add = TRUE, lw = 2)
f <- function(x){
exp(-x)*((1/2)*exp(x)-1/2)
}
plot(f, xlim = c(-10, 10))
y <- function(x){
1/2 - 1/2 * exp(-x)
}
plot(y, xlim = c(-10, 10), col = "red", lt = 2, add = TRUE, lw = 2)
16/4 == 4/1
4/16 == 1/4
x <- 3
y <- 5
2*x/2*y == x/y
2*x/2*y
x/y
(2*x)/(2*y) == x/y
(2*x)/(2*y) == x/y
(2*y)/(2*x) == y/x
x <- 98
y <- 5
(2*x)/(2*y) == x/y
(2*y)/(2*x) == y/x
3/4 < 5/4
4/3 > 4/5
3^-2
2/3
2/3
1/(2*3)
f <- function(x){
return(1-(1/x))
}
plot(f)
plot(f(1:10))
sum(f(1:10))
5*4*3*2
4*3*2
cos(0)
sin(0)
4^4
4^4/2
## Making some nice looking plots
require(plotrix) # For CI plots
rm(list = ls())
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/")
conditions <- c("base",
"sparse",
"sparse_neurogenesis"
)
legend_labels <- c("Base",
"Sparse",
"Neurogenesis"
)
# dev.off()
# pdf("sparse_nosparse_threshold.pdf", width = 8, height = 6) # turn on to save plot
par(mfrow = c(1, 2))
par(mgp=c(1.7,0.6,0), mar = c(5,3,3,1))
lw <- 2
cex_axis <- 0.85
width_ci <- 0.008
xlim <- c(0.5, 10.3)
ylim <- c(0.8, 1)
cex_main <- 1
cex_lab <- 0.9
points <- c(1, 4, 5, 2)
cex_points <- 1
colors <- c("firebrick2", "steelblue3", "darkolivegreen3", "lightgoldenrod2")
#### RETROACTIVE INTERFERENCE ####
plot(NA, xlim = xlim, ylim = ylim, frame = F,
axes = F, xlab = "Group", ylab = "Percent match", main = "Retroactive Interference",
cex.lab = cex_lab, cex.main = cex_main)
axis(2, at = seq(0.75, 1, 0.05), lwd = lw, lend = 1, font = 3,
cex.axis = cex_axis)
axis(1, at = seq(1, 10, 1), lwd = lw, lend = 1, font = 3,
cex.axis = cex_axis)
counter <- 1
space <- -0.2
space_increment <- 0.2
for (condition in conditions){
path <- paste0("scripts/final_data_second_attempt/", condition)
df_percent_match_within <- t(read.csv(paste(path, "_pm_table_within.csv", sep = ""), header = TRUE)[-1])      # proactive interference # nolint: line_length_linter.
means_within <- apply(df_percent_match_within, 2, mean)
sd_within <- apply(df_percent_match_within, 2, sd)
n_within <- nrow(df_percent_match_within)
#calculate margin of error
margin_within  <- qt(0.975,df=n_within-1)*sd_within/sqrt(n_within)
#calculate lower and upper bounds of confidence interval
low_within <- means_within - margin_within
high_within <- means_within + margin_within
plotCI((1:10) + space , means_within, ui=high_within, li=low_within, add = TRUE, lwd = lw/1.5,
pch = NA, lend = 1, sfrac = width_ci)
lines((1:10) + space, means_within, col = colors[counter], lty = 4, lend = 1, lw = lw/1.5)
points((1:10) + space, means_within, lw = lw, pch = points[counter], col = colors[counter],
cex = cex_points, lend = 1)
space <- space + space_increment
counter <- counter + 1
}
legend("bottomleft", legend_labels,
col = colors, pch = points,
bty = "n", bg = F, cex = 0.8)
### PROACTIVE INTERFERENCE ###
plot(NA, xlim = xlim, ylim = ylim, frame = F,
axes = F, xlab = "Group", ylab = "Percent match", main = "Proactive Interference",
cex.lab = cex_lab, cex.main = cex_main)
axis(2, at = seq(0.75, 1, 0.05), lwd = lw, lend = 1, font = 3,
cex.axis = cex_axis)
axis(1, at = seq(1, 10, 1), lwd = lw, lend = 1, font = 3, cex.axis = cex_axis)
counter <- 1
space <- -0.2
space_increment <- 0.2
for (condition in conditions){
path <- paste0("scripts/final_data_second_attempt/", condition)
df_percent_match_between <- t(read.csv(paste(path, "_pm_table_between.csv", sep = ""), header = TRUE)[-1])      # retroactive interference # nolint: line_length_linter.
means_between <- apply(df_percent_match_between, 2, mean)
sd_between <- apply(df_percent_match_between, 2, sd)
n_between <- nrow(df_percent_match_between)
#calculate margin of error
margin_between  <- qt(0.975,df=n_between-1)*sd_between/sqrt(n_between)
#calculate lower and upper bounds of confidence interval
low_between <- means_between - margin_between
high_between <- means_between + margin_between
plotCI((1:10) + space , means_between, ui=high_between, li=low_between, add = TRUE, lwd = lw/1.5,
pch = NA, lend = 1, sfrac = width_ci)
lines((1:10) + space, means_between, col = colors[counter], lty = 4, lend = 1, lw = lw/1.5)
points((1:10) + space, means_between, lw = lw, pch = points[counter], col = colors[counter],
cex = lw/2, lend = 1)
space <- space + space_increment
counter <- counter + 1
}
legend("bottomleft", legend_labels,
col = colors, pch = points,
bty = "n", bg = F, cex = 0.8)
#dev.off()
