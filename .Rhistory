if (figure == 4){
file_name <- "base-sparse-sparse_neurogenesis_sparse_neurogenesis_full_connectivity_separation"
conditions <- c("Base",
"sparse_015",
"sparse_015_015_neurogenesis_full_connectivity",
"sparse_015_015_neurogenesis"
)
legend_labels <- c("Base",
"Sparse firing",
"'' + Neurogenesis",
"'' + '' + Sparse connectivity"
)
colors <- c(Base, sparse, sparse_neurogenesis_full_connectivity, sparse_neurogenesis)
}
################
if (figure == 5){
file_name <- "base-neurogenesis_neurogenesis-leak_neurogenesis-leak-turnover_separation"
conditions <- c("Base",
"015_neurogenesis",
"015_neurogenesis_leak",
"015_neurogenesis_leak_turnover"
)
legend_labels <- c("Base",
"Neurogenesis",
"  ''   + leak",
"  ''   +   ''  + Turnover"
)
colors <- c(Base, neurogenesis, neurogenesis_leak, neurogenesis_leak_turnover)
}
################
if (figure == 6){
file_name <- "sparse-sparse_ng-age_sparse_ng-age_sparse_ng_leak_separation"
################
conditions <- c("sparse_015",
"all_sparse_015_015_neurogenesis",
"sparse_015_015_neurogenesis",
"sparse_015_015_neurogenesis_leak"
)
legend_labels <- c("sparse firing",
"'' + neurogenesis",
"'' + '' + age modulated sparse firing",
"'' + '' + '' + leak"
)
colors <- c(sparse, all_sparse_neurogenesis, sparse_neurogenesis, sparse_neurogenesis_leak)
}
################
if (save_file){
pdf(paste("plots/", file_name, ".pdf", sep = ""), width = 5, height = 5) # turn on to save plot
}
par(mgp=c(2,0.6,0), mar = c(4,3.5,3,0.5), mfrow = c(1, 1),
family = "serif")
confidence_intervals <- T
lw <- 2
cex_axis <- 1.3
width_ci <- 0.01
xlim <- c(0, 80)
ylim <- c(0, 80)
cex_main <- 1.2
cex_lab <- 1.2
points <- c(21, 22, 23, 24)
cex_points <- 1
opacity <- 1
# colors <- c(rgb(0.93, 0.17, 0.17, opacity), #firebrick2
#             rgb(0.31, 0.58, 0.8, opacity),  # steelblue3
#             rgb(0.64, 0.8, 0.35, opacity),  # darkolivegreen3
#             rgb(0.93, 0.86, 0.51, opacity)) # lightgoldenrod2
cex_legend <- 0.8
pos_legend <- c(25, 30)
#### PATTERN SEPARATION ####
plot(NA, xlim = xlim, ylim = ylim, frame = F,
axes = F, xlab = "Distance input", ylab = "Distance hidden representation", main = "Pattern separation",
cex.lab = cex_lab, cex.main = cex_main)
axis(2, at = seq(0, ylim[2]+10, 10), labels = seq(0, ylim[2]+10, 10), lwd = lw, lend = 1, font = 3,
cex.axis = cex_axis)
axis(1, at = seq(0, xlim[2]+10, 10), lwd = lw, lend = 1, font = 3,
cex.axis = cex_axis)
counter <- 1
space <- -0.2
space_increment <- 0.2
for (condition in conditions){
path <- paste0(path_to_data, condition)
df_x <- t(as.matrix(read.csv(paste(path, "_unique_x.csv", sep = ""), header = TRUE)[-1]))
df_y <- as.matrix(read.csv(paste(path, "_pattern_separation.csv", sep = ""), header = TRUE)[-1])
mean_y <- apply(df_y, 2, mean, na.rm = TRUE)
sd_y <- apply(df_y, 2, sd, na.rm = TRUE)
n_y <- colSums(!is.na(df_y))
margin  <- qt(0.975,df=n_y-1)*sd_y/sqrt(n_y)
#calculate lower and upper bounds of confidence interval
low <- mean_y - margin
high <- mean_y + margin
if (confidence_intervals){
plotCI(df_x , mean_y, ui=high, li=low, add = TRUE, lwd = lw/1.5,
pch = NA, lend = 1, sfrac = width_ci)
}
segments(70, mean(mean_y[2:length(mean_y)]), 80, mean(mean_y[2:length(mean_y)]), col = colors[counter], lty = 1, lw = lw*3, lend = 1)
segments(0, mean(mean_y[2:length(mean_y)]), 80, mean(mean_y[2:length(mean_y)]), col = colors[counter], lty = 3, lw = lw/2, lend = 1)
points(df_x, mean_y, lw = lw, pch = points[counter], col = colors[counter],
cex = cex_points, lend = 1, bg = colors[counter])
#(mean_y, add = T, boxwex=10, col = colors[counter], axes = F)
# lines(df_x, mean_y, lw = lw, pch = points[counter], col = colors[counter],
#       cex = cex_points, lend = 1)
counter <- counter + 1
}
#abline(0, 1, col = "black", lty = 3, lw = lw/2, lend = 1)
segments(0, 0, 80, 80, col = "black", lty = 3, lw = lw/2, lend = 1)
legend("bottomright",
#pos_legend[1], pos_legend[2],
legend_labels,
col = colors, pch = points,
bty = "n", pt.bg = colors, cex = cex_legend)
if (save_file){
dev.off()
}
## Making some nice looking plots
rm(list = ls())
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/")
require(plotrix) # For CI plots
path_to_data <- "scripts/final_data/"
file_name <- "test_separation"
# plot is only shown if save_file == F
save_file <- T
Base <- "#EE4000"
sparse_015_015_neurogenesis_leak_turnover <- "cadetblue4"
neurogenesis <- "darkseagreen3"
neurogenesis_leak <- "#8B3626"
neurogenesis_leak_turnover <- "lightsteelblue2"
sparse <- "#FF8C00"
sparse_neurogenesis_full_connectivity <- "#548B54"
sparse_neurogenesis <- "royalblue4"
all_sparse_neurogenesis <- "#CDB5CD"
sparse_neurogenesis <- "#00E5EE"
sparse_neurogenesis_leak <- "#8B8989"
figure <- 5
if (figure == 3){
file_name <- "base-all_separation"
conditions <- c("Base",
"sparse_015_015_neurogenesis_leak_turnover"
)
legend_labels <- c("Base",
"Full Neurogenesis + Turnover"
)
colors <- c(Base, sparse_015_015_neurogenesis_leak_turnover)
}
################
if (figure == 4){
file_name <- "base-sparse-sparse_neurogenesis_sparse_neurogenesis_full_connectivity_separation"
conditions <- c("Base",
"sparse_015",
"sparse_015_015_neurogenesis_full_connectivity",
"sparse_015_015_neurogenesis"
)
legend_labels <- c("Base",
"Sparse firing",
"'' + Neurogenesis",
"'' + '' + Sparse connectivity"
)
colors <- c(Base, sparse, sparse_neurogenesis_full_connectivity, sparse_neurogenesis)
}
################
if (figure == 5){
file_name <- "base-neurogenesis_neurogenesis-leak_neurogenesis-leak-turnover_separation"
conditions <- c("Base",
"015_neurogenesis",
"015_neurogenesis_leak",
"015_neurogenesis_leak_turnover"
)
legend_labels <- c("Base",
"Neurogenesis",
"  ''   + leak",
"  ''   +   ''  + Turnover"
)
colors <- c(Base, neurogenesis, neurogenesis_leak, neurogenesis_leak_turnover)
}
################
if (figure == 6){
file_name <- "sparse-sparse_ng-age_sparse_ng-age_sparse_ng_leak_separation"
################
conditions <- c("sparse_015",
"all_sparse_015_015_neurogenesis",
"sparse_015_015_neurogenesis",
"sparse_015_015_neurogenesis_leak"
)
legend_labels <- c("sparse firing",
"'' + neurogenesis",
"'' + '' + age modulated sparse firing",
"'' + '' + '' + leak"
)
colors <- c(sparse, all_sparse_neurogenesis, sparse_neurogenesis, sparse_neurogenesis_leak)
}
################
if (save_file){
pdf(paste("plots/", file_name, ".pdf", sep = ""), width = 5, height = 5) # turn on to save plot
}
par(mgp=c(2,0.6,0), mar = c(4,3.5,3,0.5), mfrow = c(1, 1),
family = "serif")
confidence_intervals <- T
lw <- 2
cex_axis <- 1.3
width_ci <- 0.01
xlim <- c(0, 80)
ylim <- c(0, 80)
cex_main <- 1.2
cex_lab <- 1.2
points <- c(21, 22, 23, 24)
cex_points <- 1
opacity <- 1
# colors <- c(rgb(0.93, 0.17, 0.17, opacity), #firebrick2
#             rgb(0.31, 0.58, 0.8, opacity),  # steelblue3
#             rgb(0.64, 0.8, 0.35, opacity),  # darkolivegreen3
#             rgb(0.93, 0.86, 0.51, opacity)) # lightgoldenrod2
cex_legend <- 0.8
pos_legend <- c(25, 30)
#### PATTERN SEPARATION ####
plot(NA, xlim = xlim, ylim = ylim, frame = F,
axes = F, xlab = "Distance input", ylab = "Distance hidden representation", main = "Pattern separation",
cex.lab = cex_lab, cex.main = cex_main)
axis(2, at = seq(0, ylim[2]+10, 10), labels = seq(0, ylim[2]+10, 10), lwd = lw, lend = 1, font = 3,
cex.axis = cex_axis)
axis(1, at = seq(0, xlim[2]+10, 10), lwd = lw, lend = 1, font = 3,
cex.axis = cex_axis)
counter <- 1
space <- -0.2
space_increment <- 0.2
for (condition in conditions){
path <- paste0(path_to_data, condition)
df_x <- t(as.matrix(read.csv(paste(path, "_unique_x.csv", sep = ""), header = TRUE)[-1]))
df_y <- as.matrix(read.csv(paste(path, "_pattern_separation.csv", sep = ""), header = TRUE)[-1])
mean_y <- apply(df_y, 2, mean, na.rm = TRUE)
sd_y <- apply(df_y, 2, sd, na.rm = TRUE)
n_y <- colSums(!is.na(df_y))
margin  <- qt(0.975,df=n_y-1)*sd_y/sqrt(n_y)
#calculate lower and upper bounds of confidence interval
low <- mean_y - margin
high <- mean_y + margin
if (confidence_intervals){
plotCI(df_x , mean_y, ui=high, li=low, add = TRUE, lwd = lw/1.5,
pch = NA, lend = 1, sfrac = width_ci)
}
segments(70, mean(mean_y[2:length(mean_y)]), 80, mean(mean_y[2:length(mean_y)]), col = colors[counter], lty = 1, lw = lw*3, lend = 1)
segments(0, mean(mean_y[2:length(mean_y)]), 80, mean(mean_y[2:length(mean_y)]), col = colors[counter], lty = 3, lw = lw/2, lend = 1)
points(df_x, mean_y, lw = lw, pch = points[counter], col = colors[counter],
cex = cex_points, lend = 1, bg = colors[counter])
#(mean_y, add = T, boxwex=10, col = colors[counter], axes = F)
# lines(df_x, mean_y, lw = lw, pch = points[counter], col = colors[counter],
#       cex = cex_points, lend = 1)
counter <- counter + 1
}
#abline(0, 1, col = "black", lty = 3, lw = lw/2, lend = 1)
segments(0, 0, 80, 80, col = "black", lty = 3, lw = lw/2, lend = 1)
legend("bottomright",
#pos_legend[1], pos_legend[2],
legend_labels,
col = colors, pch = points,
bty = "n", pt.bg = colors, cex = cex_legend)
if (save_file){
dev.off()
}
## Making some nice looking plots
rm(list = ls())
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/")
require(plotrix) # For CI plots
path_to_data <- "scripts/final_data/"
file_name <- "test_separation"
# plot is only shown if save_file == F
save_file <- T
Base <- "#EE4000"
sparse_015_015_neurogenesis_leak_turnover <- "cadetblue4"
neurogenesis <- "darkseagreen3"
neurogenesis_leak <- "#8B3626"
neurogenesis_leak_turnover <- "lightsteelblue2"
sparse <- "#FF8C00"
sparse_neurogenesis_full_connectivity <- "#548B54"
sparse_neurogenesis <- "royalblue4"
all_sparse_neurogenesis <- "#CDB5CD"
sparse_neurogenesis <- "#00E5EE"
sparse_neurogenesis_leak <- "#8B8989"
figure <- 6
if (figure == 3){
file_name <- "base-all_separation"
conditions <- c("Base",
"sparse_015_015_neurogenesis_leak_turnover"
)
legend_labels <- c("Base",
"Full Neurogenesis + Turnover"
)
colors <- c(Base, sparse_015_015_neurogenesis_leak_turnover)
}
################
if (figure == 4){
file_name <- "base-sparse-sparse_neurogenesis_sparse_neurogenesis_full_connectivity_separation"
conditions <- c("Base",
"sparse_015",
"sparse_015_015_neurogenesis_full_connectivity",
"sparse_015_015_neurogenesis"
)
legend_labels <- c("Base",
"Sparse firing",
"'' + Neurogenesis",
"'' + '' + Sparse connectivity"
)
colors <- c(Base, sparse, sparse_neurogenesis_full_connectivity, sparse_neurogenesis)
}
################
if (figure == 5){
file_name <- "base-neurogenesis_neurogenesis-leak_neurogenesis-leak-turnover_separation"
conditions <- c("Base",
"015_neurogenesis",
"015_neurogenesis_leak",
"015_neurogenesis_leak_turnover"
)
legend_labels <- c("Base",
"Neurogenesis",
"  ''   + leak",
"  ''   +   ''  + Turnover"
)
colors <- c(Base, neurogenesis, neurogenesis_leak, neurogenesis_leak_turnover)
}
################
if (figure == 6){
file_name <- "sparse-sparse_ng-age_sparse_ng-age_sparse_ng_leak_separation"
################
conditions <- c("sparse_015",
"all_sparse_015_015_neurogenesis",
"sparse_015_015_neurogenesis",
"sparse_015_015_neurogenesis_leak"
)
legend_labels <- c("sparse firing",
"'' + neurogenesis",
"'' + '' + age modulated sparse firing",
"'' + '' + '' + leak"
)
colors <- c(sparse, all_sparse_neurogenesis, sparse_neurogenesis, sparse_neurogenesis_leak)
}
################
if (save_file){
pdf(paste("plots/", file_name, ".pdf", sep = ""), width = 5, height = 5) # turn on to save plot
}
par(mgp=c(2,0.6,0), mar = c(4,3.5,3,0.5), mfrow = c(1, 1),
family = "serif")
confidence_intervals <- T
lw <- 2
cex_axis <- 1.3
width_ci <- 0.01
xlim <- c(0, 80)
ylim <- c(0, 80)
cex_main <- 1.2
cex_lab <- 1.2
points <- c(21, 22, 23, 24)
cex_points <- 1
opacity <- 1
# colors <- c(rgb(0.93, 0.17, 0.17, opacity), #firebrick2
#             rgb(0.31, 0.58, 0.8, opacity),  # steelblue3
#             rgb(0.64, 0.8, 0.35, opacity),  # darkolivegreen3
#             rgb(0.93, 0.86, 0.51, opacity)) # lightgoldenrod2
cex_legend <- 0.8
pos_legend <- c(25, 30)
#### PATTERN SEPARATION ####
plot(NA, xlim = xlim, ylim = ylim, frame = F,
axes = F, xlab = "Distance input", ylab = "Distance hidden representation", main = "Pattern separation",
cex.lab = cex_lab, cex.main = cex_main)
axis(2, at = seq(0, ylim[2]+10, 10), labels = seq(0, ylim[2]+10, 10), lwd = lw, lend = 1, font = 3,
cex.axis = cex_axis)
axis(1, at = seq(0, xlim[2]+10, 10), lwd = lw, lend = 1, font = 3,
cex.axis = cex_axis)
counter <- 1
space <- -0.2
space_increment <- 0.2
for (condition in conditions){
path <- paste0(path_to_data, condition)
df_x <- t(as.matrix(read.csv(paste(path, "_unique_x.csv", sep = ""), header = TRUE)[-1]))
df_y <- as.matrix(read.csv(paste(path, "_pattern_separation.csv", sep = ""), header = TRUE)[-1])
mean_y <- apply(df_y, 2, mean, na.rm = TRUE)
sd_y <- apply(df_y, 2, sd, na.rm = TRUE)
n_y <- colSums(!is.na(df_y))
margin  <- qt(0.975,df=n_y-1)*sd_y/sqrt(n_y)
#calculate lower and upper bounds of confidence interval
low <- mean_y - margin
high <- mean_y + margin
if (confidence_intervals){
plotCI(df_x , mean_y, ui=high, li=low, add = TRUE, lwd = lw/1.5,
pch = NA, lend = 1, sfrac = width_ci)
}
segments(70, mean(mean_y[2:length(mean_y)]), 80, mean(mean_y[2:length(mean_y)]), col = colors[counter], lty = 1, lw = lw*3, lend = 1)
segments(0, mean(mean_y[2:length(mean_y)]), 80, mean(mean_y[2:length(mean_y)]), col = colors[counter], lty = 3, lw = lw/2, lend = 1)
points(df_x, mean_y, lw = lw, pch = points[counter], col = colors[counter],
cex = cex_points, lend = 1, bg = colors[counter])
#(mean_y, add = T, boxwex=10, col = colors[counter], axes = F)
# lines(df_x, mean_y, lw = lw, pch = points[counter], col = colors[counter],
#       cex = cex_points, lend = 1)
counter <- counter + 1
}
#abline(0, 1, col = "black", lty = 3, lw = lw/2, lend = 1)
segments(0, 0, 80, 80, col = "black", lty = 3, lw = lw/2, lend = 1)
legend("bottomright",
#pos_legend[1], pos_legend[2],
legend_labels,
col = colors, pch = points,
bty = "n", pt.bg = colors, cex = cex_legend)
if (save_file){
dev.off()
}
rm(list = ls())
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/")
save = F
# Gompertz
g <- function(x, s = 5){
exp(-exp(-s * x))
}
sg <- seq(-1, 1, length.out = 100)
xg <- g(sg)
if (save){
pdf("gompertz.pdf", width = 5, height = 5)
}
par(mfrow = c(1, 1), mar = c(5,5,4,3), family = "serif")
plot(sg, xg, type = "l", xlim = c(-1, 1), frame = F, cex.lab = 2, ylab = "y", xlab = "x", lwd = 2, col = "red", axes = F)
axis(side = 1, lwd = 1.5, cex.axis = 1.5)
axis(side = 2, lwd = 1.5, cex.axis = 1.5)
if (save){
dev.off()
}
# STDP
tau_pre <- 20
tau_post <- 20
A_pre <- 0.01
A_post <- -A_pre * 1.05
delta_t <- seq(-50, 50, length.out = 100)
W <- ifelse(delta_t > 0, A_pre * exp(-delta_t/tau_pre), A_post * exp(delta_t/tau_post))
if (save){
pdf("stdp.pdf", width = 5, height = 5)
}
par(mfrow = c(1, 1), mar = c(5,5,4,2), family = "serif")
plot(delta_t, W, type = "l",  frame = F, cex.lab = 2, xlab = expression(Delta * t~'(ms)'), ylab = expression(Delta * W), lwd = 2, col = "red", axes = F)
segments(-50, 0, 50, 0, lty = 2, col = 'black', lwd = 2, lend = 1)
axis(side = 1, lwd = 1.5, cex.axis = 1.5)
axis(side = 2, lwd = 1.5, cex.axis = 1.5)
if (save){
dev.off()
}
rm(list = ls())
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/")
save = F
# Gompertz
g <- function(x, s = 5){
exp(-exp(-s * x))
}
sg <- seq(-1, 1, length.out = 100)
xg <- g(sg)
if (save){
pdf("gompertz.pdf", width = 5, height = 5)
}
par(mfrow = c(1, 1), mar = c(5,5,4,3), family = "serif")
plot(sg, xg, type = "l", xlim = c(-1, 1), frame = F, cex.lab = 2, ylab = "y", xlab = "x", lwd = 2, col = "red", axes = F)
axis(side = 1, lwd = 1.5, cex.axis = 1.5)
axis(side = 2, lwd = 1.5, cex.axis = 1.5)
if (save){
dev.off()
}
# STDP
tau_pre <- 20
tau_post <- 20
A_pre <- 0.01
A_post <- -A_pre * 1.05
delta_t <- seq(-50, 50, length.out = 100)
W <- ifelse(delta_t > 0, A_pre * exp(-delta_t/tau_pre), A_post * exp(delta_t/tau_post))
if (save){
pdf("stdp.pdf", width = 5, height = 5)
}
par(mfrow = c(1, 1), mar = c(5,5,4,2), family = "serif")
plot(delta_t, W, type = "l",  frame = F, cex.lab = 2, xlab = expression(Delta * t~'(ms)'), ylab = expression(Delta * w), lwd = 2, col = "red", axes = F)
segments(-50, 0, 50, 0, lty = 2, col = 'black', lwd = 2, lend = 1)
axis(side = 1, lwd = 1.5, cex.axis = 1.5)
axis(side = 2, lwd = 1.5, cex.axis = 1.5)
if (save){
dev.off()
}
rm(list = ls())
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/")
save = T
# Gompertz
g <- function(x, s = 5){
exp(-exp(-s * x))
}
sg <- seq(-1, 1, length.out = 100)
xg <- g(sg)
if (save){
pdf("gompertz.pdf", width = 5, height = 5)
}
par(mfrow = c(1, 1), mar = c(5,5,4,3), family = "serif")
plot(sg, xg, type = "l", xlim = c(-1, 1), frame = F, cex.lab = 2, ylab = "y", xlab = "x", lwd = 2, col = "red", axes = F)
axis(side = 1, lwd = 1.5, cex.axis = 1.5)
axis(side = 2, lwd = 1.5, cex.axis = 1.5)
if (save){
dev.off()
}
# STDP
tau_pre <- 20
tau_post <- 20
A_pre <- 0.01
A_post <- -A_pre * 1.05
delta_t <- seq(-50, 50, length.out = 100)
W <- ifelse(delta_t > 0, A_pre * exp(-delta_t/tau_pre), A_post * exp(delta_t/tau_post))
if (save){
pdf("stdp.pdf", width = 5, height = 5)
}
par(mfrow = c(1, 1), mar = c(5,5,4,2), family = "serif")
plot(delta_t, W, type = "l",  frame = F, cex.lab = 2, xlab = expression(Delta * t~'(ms)'), ylab = expression(Delta * w), lwd = 2, col = "red", axes = F)
segments(-50, 0, 50, 0, lty = 2, col = 'black', lwd = 2, lend = 1)
axis(side = 1, lwd = 1.5, cex.axis = 1.5)
axis(side = 2, lwd = 1.5, cex.axis = 1.5)
if (save){
dev.off()
}
