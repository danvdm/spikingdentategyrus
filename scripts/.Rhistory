BWBS <- df["BWBS_to"][[1]]
names(df)
par(mfrow = c(2, 2))
hist(MHCSF) # Psych well-beeing
hist(CCHS)  # Eco hope
hist(GEBM)  # Pro env behav
hist(BWBS)  # View on well beeing
shapiro.test(MHCSF)
shapiro.test(CCHS)
shapiro.test(GEBM)
shapiro.test(BWBS)
split <- 72
GEBM_vl <- df["GEBM_to"][[1]][df["BWBS_to"] < split]
GEBM_vh <- df["GEBM_to"][[1]][df["BWBS_to"] > split]
MHCSF_vl <- df["MHCSF_to"][[1]][df["BWBS_to"] < split]
MHCSF_vh <- df["MHCSF_to"][[1]][df["BWBS_to"] > split]
par(mfrow = c(1, 1))
plot(GEBM_vl, MHCSF_vl, frame = F, pch = 21, bg = "red",
ylab = "Well-beeing", xlab = "Pro-Env. behav.")
points(GEBM_vh, MHCSF_vh, pch = 21, bg = "green")
abline(lm(MHCSF_vl ~ GEBM_vl), col = "red", lw = 2)
abline(lm(MHCSF_vh ~ GEBM_vh), col = "green", lw = 2)
abline(lm(MHCSF ~ GEBM), col = "blue", lw = 2)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"))
summary(lm(MHCSF ~ GEBM))
abline(lm(MHCSF_vl ~ GEBM_vl), col = "red", lw = 2, lty = 2)
par(mfrow = c(1, 1))
plot(GEBM_vl, MHCSF_vl, frame = F, pch = 21, bg = "red",
ylab = "Well-beeing", xlab = "Pro-Env. behav.")
points(GEBM_vh, MHCSF_vh, pch = 21, bg = "green")
abline(lm(MHCSF_vl ~ GEBM_vl), col = "red", lw = 2, lty = 2)
abline(lm(MHCSF_vh ~ GEBM_vh), col = "green", lw = 2, lty = 2)
abline(lm(MHCSF ~ GEBM), col = "blue", lw = 2, lty = 2)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"))
par(mfrow = c(1, 1))
plot(GEBM_vl, MHCSF_vl, frame = F, pch = 21, bg = "red",
ylab = "Well-beeing", xlab = "Pro-Env. behav.")
points(GEBM_vh, MHCSF_vh, pch = 21, bg = "green")
abline(lm(MHCSF_vl ~ GEBM_vl), col = "red", lw = 2, lty = 2)
abline(lm(MHCSF_vh ~ GEBM_vh), col = "green", lw = 2, lty = 2)
abline(lm(MHCSF ~ GEBM), lw = 2, lty = 2)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"))
summary(lm(MHCSF_vh ~ GEBM_vh))
par(mfrow = c(1, 1))
plot(GEBM_vl, MHCSF_vl, frame = F, pch = 21, bg = "red",
ylab = "Well-beeing", xlab = "Pro-Env. behav.")
points(GEBM_vh, MHCSF_vh, pch = 21, bg = "green")
abline(lm(MHCSF_vl ~ GEBM_vl), col = "red", lw = 2, lty = 2)
abline(lm(MHCSF_vh ~ GEBM_vh), col = "green", lw = 2, lty = 2)
abline(lm(MHCSF ~ GEBM), col = "gray", lw = 2, lty = 2)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"))
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"), box = F)
par(mfrow = c(1, 1))
plot(GEBM_vl, MHCSF_vl, frame = F, pch = 21, bg = "red",
ylab = "Well-beeing", xlab = "Pro-Env. behav.")
points(GEBM_vh, MHCSF_vh, pch = 21, bg = "green")
abline(lm(MHCSF_vl ~ GEBM_vl), col = "red", lw = 2, lty = 2)
abline(lm(MHCSF_vh ~ GEBM_vh), col = "green", lw = 2, lty = 2)
abline(lm(MHCSF ~ GEBM), col = "gray", lw = 2, lty = 2)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"), box = F)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"), frame = F)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"), box = F)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"), box.col = "white")
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"), box.col = F)
par(mfrow = c(1, 1))
plot(GEBM_vl, MHCSF_vl, frame = F, pch = 21, bg = "red",
ylab = "Well-beeing", xlab = "Pro-Env. behav.")
points(GEBM_vh, MHCSF_vh, pch = 21, bg = "green")
abline(lm(MHCSF_vl ~ GEBM_vl), col = "red", lw = 2, lty = 2)
abline(lm(MHCSF_vh ~ GEBM_vh), col = "green", lw = 2, lty = 2)
abline(lm(MHCSF ~ GEBM), col = "gray", lw = 2, lty = 2)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"), box.col = F)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"), box.lwd = 0)
par(mfrow = c(1, 1))
plot(GEBM_vl, MHCSF_vl, frame = F, pch = 21, bg = "red",
ylab = "Well-beeing", xlab = "Pro-Env. behav.")
points(GEBM_vh, MHCSF_vh, pch = 21, bg = "green")
abline(lm(MHCSF_vl ~ GEBM_vl), col = "red", lw = 2, lty = 2)
abline(lm(MHCSF_vh ~ GEBM_vh), col = "green", lw = 2, lty = 2)
abline(lm(MHCSF ~ GEBM), col = "gray", lw = 2, lty = 2)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"), box.lwd = 0)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"), box.lwd = 0,
bg = F)
par(mfrow = c(1, 1))
plot(GEBM_vl, MHCSF_vl, frame = F, pch = 21, bg = "red",
ylab = "Well-beeing", xlab = "Pro-Env. behav.")
points(GEBM_vh, MHCSF_vh, pch = 21, bg = "green")
abline(lm(MHCSF_vl ~ GEBM_vl), col = "red", lw = 2, lty = 2)
abline(lm(MHCSF_vh ~ GEBM_vh), col = "green", lw = 2, lty = 2)
abline(lm(MHCSF ~ GEBM), col = "gray", lw = 2, lty = 2)
legend("bottomleft", c("Hedonic v. o. wb",
"Eudamonic v. o. wb."),
col = c("red", "green"), fill = c("red", "green"), box.lwd = 0,
bg = F)
BWBS_to_bin <- ifelse(0, df["BWBS_to"] < split, 1)
BWBS_to_bin
df["BWBS_to"]
BWBS_to_bin <- where(0, df["BWBS_to"] < split, 1)
BWBS_to_bin <- df["BWBS_to"]
df["BWBS_to"][df["BWBS_to"]<split]
BWBS_to_bin <- c()
BWBS_to_bin <- df["BWBS_to"][df["BWBS_to"]<split]
BWBS_to_bin[df["BWBS_to"][df["BWBS_to"]<split]] <- 0
BWBS_to_bin[df["BWBS_to"][df["BWBS_to"]>=split]] <- 1
BWBS_to_bin
BWBS_to_bin
df["BWBS_to"][df["BWBS_to"]<split]
pi
n <- function(x, s = 1, m = 0) {
(1/(sqrt(2 * pi * s^2)))*exp(-((x-m)^2)/(2*s^2))
}
x <- seq(-3, 3, 0.1)
plot(n(x))
plot(x, n(x))
plot(n(x))
plot(x, n(x))
plot(n(x), xlim = c(-3, 3))
plot(n, xlim = c(-3, 3))
plot(dnorm)
plot(dnorm, xlim = c(-3, 3))
plot(n, xlim = c(-3, 3))
plot(dnorm, xlim = c(-3, 3))
plot(n, xlim = c(-3, 3))
plot(dnorm, xlim = c(-3, 3))
plot(exp)
plot(exp, xlim = c(-10, 10))
plot(exp, xlim = c(-3, 3))
plot(exp, xlim = c(-3, 3), ylim = c(-3, 3))
abline(h = 0)
abline(h = 0, v = 0)
lines(log)
lines(log(seq(0, 3, 0.1)))
lines(log(seq(-3, 3, 0.1)))
lines(log(seq(0.1, 3, 0.1)))
plot(exp, xlim = c(-3, 3), ylim = c(-3, 3))
lines(log(seq(0.1, 3, 0.1)))
abline(h = 0, v = 0)
abline(1, 0)
abline(0, 1)
plot(exp, xlim = c(-3, 3), ylim = c(-3, 3))
lines(log(seq(0.1, 3, 0.1)))
abline(0, 1)
abline(h = 0, v = 0)
lines(log(seq(0.1, 3, 0.01)))
plot(log, xlim = c(-3, 3), ylim = c(-3, 3))
plot(log, xlim = c(-3, 3), ylim = c(-3, 3))
abline(0, 1)
abline(h = 0, v = 0)
plot(exp, xlim = c(-3, 3), ylim = c(-3, 3), add = T)
plot(log, xlim = c(-3, 3), ylim = c(-3, 3))
plot(exp, xlim = c(-3, 3), ylim = c(-3, 3), add = T)
abline(0, 1)
abline(h = 0, v = 0)
plot(log, xlim = c(-3, 3), ylim = c(-3, 3))
plot(-exp, xlim = c(-3, 3), ylim = c(-3, 3), add = T)
abline(0, 1)
abline(h = 0, v = 0)
plot(exp, xlim = c(-3, 3), ylim = c(-3, 3), add = T)
n <- function(x, s = 1, m = 0) {
log((1/(sqrt(2 * pi * s^2)))*exp(-((x-m)^2)/(2*s^2)))
}
x <- seq(-3, 3, 0.1)
plot(n, xlim = c(-3, 3))
plot(dnorm, xlim = c(-3, 3))
plot(n, xlim = c(-3, 3), ylim = c(-3, 3))
plot(n, xlim = c(-3, 3), ylim = c(-10, 3))
plot(dnorm, xlim = c(-3, 3), ylim = c(-3, 3), add = T)
plot(n, xlim = c(-3, 3), ylim = c(-10, 3))
plot(dnorm, xlim = c(-3, 3), ylim = c(-10, 3), add = T)
plot(n, xlim = c(-3, 3), ylim = c(-10, 10))
plot(dnorm, xlim = c(-3, 3), ylim = c(-10, 10), add = T)
plot(n, xlim = c(-3, 3), ylim = c(-5, 1))
plot(dnorm, xlim = c(-3, 3), ylim = c(-5, 1), add = T)
abline(0, 1)
abline(h = 0, v = 0)
plot(n, xlim = c(-3, 3), ylim = c(-5, 1))
plot(dnorm, xlim = c(-3, 3), ylim = c(-5, 1), add = T)
#abline(0, 1)
abline(h = 0, v = 0)
plot(n, xlim = c(-3, 3), ylim = c(-5, 1))
plot(dnorm, xlim = c(-3, 3), ylim = c(-5, 1), add = T)
#abline(0, 1)
abline(h = 0, v = 0, lty = 2)
2200 * 1.55
4100/2200
4100/2200-1
4100/2200-1*100
(4100/2200-1)*100
round((4100/2200-1)*100)
round((4100/2200-1)*100)
2200 * 1.86
2200 * 1.86.5
2200 * 1.8655
2200 * 1.8653
2200 * 1.8652
2200 * 1.862
2200 * 1.863
2200 * 1.864
2200 * 1.8635
2200 * 1.8636
2200 * 1.8637
2200 * 1.86365
2200 * 1.86364
2200 * 1.86363
2200 * 1.863632
2200 * 1.863633
2200 * 1.863634
2200 * 1.863635
2200 * 1.863636
2200 * 1.863637
2200 * 1.8636365
2600 * 1.55
2600 * 1.56
2600 * 1.60
2600 * 1.57
2600 * 1.58
-1+2/2
(-1+2)/2
(-0+2)/2
(-0+2)/4
(-1+2)/4
(-1+4)/4
(-0+4)/4
(-0+5)/4
(-1+5)/4
(-1+6)/5
(-0+6)/5
(-0+3)/4
(-1+3)/4
(-1+4)/4
(-0+4)/4
(-1+4)/4
(-1+4)/5
(-0+4)/5
(-0+6)/5
(-1+6)/5
((-1+6)/5+0.2)
((-0+6)/5+0.2)
((-1+6)/5+0.2)
((-1+4)/5+0.2)
((-0+4)/5+0.2)
((-0+4)/5+0.3)
((-1+4)/5+0.3)
((-1+2)/3+0.3)
((-1+2)/3+0.5)
((-0+2)/3+0.5)
((-1+2)/3+0.5)
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/scripts/")
df <- read.csv("weights.csv", header = TRUE)
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/scripts/")
df <- read.csv("weights.csv", header = TRUE)
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/scripts/")
df <- read.csv("weights.csv", header = TRUE)
length(df[2, ])
length(df[, 1])
get_attributes <- function(weights_list){
list_out <- list("n_layers" = c(),
"n_neurons" = c(),
"weights" = c(),
"biases" = list())
list_out$n_layers <- length(weights_list)+1
list_out$n_neurons[1] <- nrow(weights_list[[1]])-1
list_out$n_neurons[2] <- ncol(weights_list[[1]])-1
if (length(weights_list)>1){
for (mat in c(2:(length(weights_list)))){
list_out$n_neurons <- c(list_out$n_neurons, ncol(weights_list[[mat]])-1)
}
}
for (mat in c(1:length(weights_list))){
list_out$weights[[mat]] <- weights_list[[mat]][-1, -1, drop = F]
list_out$biases[[mat]] <- list(weights_list[[mat]][, 1][-1],
weights_list[[mat]][1, ][-1])
}
return(list_out)
}
divider <- function(min, max, n){
seq(min, max, max / (n + 1))[2:(n+1)]
}
plot_net <- function(model, scale_factor = 1, min_opacity = 50,
do_no_scale = F, labels_in = NA, labels_in_2 = NA,
labels_hidden = NA, labels_out = NA, labels_out_2 = NA,
text_size = 1, min_lw = 0.1, main = NA, plot_bias = F,
no_bias_in_input = F){
x.range<-c(0,100)
y.range<-c(0,100)
max_lw = 5 * scale_factor
point_size = 4 * scale_factor
if (no_bias_in_input){
for (m in 1:length(model)){
model[[m]] <- cbind(0, rbind(0, model[[m]]))
if(plot_bias){
plot_bias <- F
print("You indicated that no bias was present - plot_bias was set to FALSE")
}
}
}
attributes <- get_attributes(model)
y_vals_layers <- rev(divider(0, 100, attributes$n_layers))
y_vals_biases <- rep(c(y_vals_layers + y_vals_layers[length(y_vals_layers)]/3)[-1],
each = 2)
xvals <- list()
for (i in 1:length(attributes$n_neurons)){
xvals[[i]] <- divider(0, 100, attributes$n_neurons[i])
}
xvals_biases_r <- c()
xvals_biases_l <- c()
for (i in 1:length(model)){
xvals_biases_r <- c(xvals_biases_r, xvals[[i]][1]/2 + xvals[[i]][length(xvals[[i]])])
xvals_biases_l <- c(xvals_biases_l, xvals[[i]][1]/2)
#xvals_biases <- c(xvals_biases, c(xvals_biases_l[i], xvals_biases_r[i]))
}
xvals_biases <- c()
for (i in 1:length(xvals_biases_l)){
xvals_biases <- c(xvals_biases, c(xvals_biases_l[i], xvals_biases_r[i]))
}
range <- range(abs(c(unlist(attributes$weights), unlist(attributes$biases))))
plot(x.range,y.range,type='n',axes=F,ylab='',xlab='', main = main)
for (i in 1:(length(model))){
for (line_end in c(1: attributes$n_neurons[i+1])){
for (line_start in c(1:attributes$n_neurons[i])){
lw = scales::rescale(abs(attributes$weights[[i]][line_start, line_end, drop = F]),
from = range,
to=c(min_lw, max_lw))
if (attributes$weights[[i]][line_start, line_end] == 0){lw = 0}
if (attributes$weights[[i]][line_start, line_end, drop = F] <= 0){
col = rgb(100, 100, 255, max = 255,
alpha = scales::rescale(abs(attributes$weights[[i]][line_start, line_end, drop = F]),
from = range,
to=c(min_opacity, 255)))
}
else
col = rgb(255, 100, 100, max = 255,
alpha = scales::rescale(attributes$weights[[i]][line_start, line_end, drop = F],
from = range,
to=c(min_opacity, 255)))
segments(x0 = xvals[[i]][line_start], y0 =  y_vals_layers[i],
x1 = xvals[[i+1]][line_end], y1 = y_vals_layers[i+1],
col = col, lw = lw)
}
}
if (plot_bias == T){
for (line_start in c(1: attributes$n_neurons[i])){
lw = scales::rescale(abs(attributes$biases[[i]][[1]][line_start]),
from = range,
to=c(1, max_lw))
if (attributes$weights[[i]][line_start, line_end] == 0){lw = 0}
if (attributes$biases[[i]][[1]][line_start]<= 0){
col = rgb(100, 100, 255, max = 255,
alpha = scales::rescale(abs(abs(attributes$biases[[i]][[1]][line_start])),
from = range,
to=c(min_opacity, 255)))
}else
col = rgb(255, 100, 100, max = 255,
alpha = scales::rescale(abs(attributes$biases[[i]][[1]][line_start]),
from = range,
to=c(min_opacity, 255)))
segments(x0 = xvals[[i]][line_start], y0 =  y_vals_layers[i],
x1 = xvals_biases_l[i], y1 = unique(y_vals_biases)[i],
col = col, lw = lw)
}
for (line_start in c(1: attributes$n_neurons[i+1])){
lw = scales::rescale(abs(attributes$biases[[i]][[2]][line_start]),
from = range,
to=c(1, max_lw))
if (attributes$biases[[i]][[2]][line_start]<= 0){
col = rgb(100, 100, 255, max = 255,
alpha = scales::rescale(abs(abs(attributes$biases[[i]][[2]][line_start])),
from = range,
to=c(min_opacity, 255)))
}else
col = rgb(255, 100, 100, max = 255,
alpha = scales::rescale(abs(attributes$biases[[i]][[2]][line_start]),
from = range,
to=c(min_opacity, 255)))
segments(x0 = xvals[[i+1]][line_start], y0 =  y_vals_layers[i+1],
x1 = xvals_biases_r[i], y1 = unique(y_vals_biases)[i],
col = col, lw = lw)
}
points(xvals_biases, y_vals_biases,
pch = 20, cex = point_size, col = "gray")
}
points(xvals[[i]], rep(y_vals_layers[i], length(xvals[[i]])),
pch = 20, cex = point_size, col = "gray")
}
points(xvals[[i+1]], rep(y_vals_layers[i+1], length(xvals[[i+1]])),
pch = 20, cex = point_size, col = "gray")
}
find_mode <- function(x) {
u <- unique(x)
tab <- tabulate(match(x, u))
return(u[tab == max(tab)][1])
}
find_mode_freq <- function(x) {
u <- unique(x)
return(max(tabulate(match(x, u))))
}
plot_freqs <- function(input, breaks = 100, xlim = c(0, 3000), main = NA, xlab = NA,
ylab = NA, ylim = c(0, 20), stat = mean, pos_leg = "top"){
dat <- list(input$pre$iterations, input$rev$iterations, input$nrev$iterations)
min_max <- c(floor(range(unlist(dat))/breaks)[1], ceiling(range(unlist(dat))/breaks)[2])*breaks
cols <- c(rgb(0.3, 1, 0.3, 0.5),
rgb(1, 0.3, 0.3, 0.5),
rgb(0.3, 0.3, 1, 0.5))
if(missing(xlim)){
xlim <- c(0, max(unlist(dat))+breaks)
}
if(missing(ylim)){
ylim <- c(0, find_mode_freq(round(unlist(dat)/(breaks)))+5)
}
par(cex.main = 1.5, mgp = c(3.5, 1, 0), cex.lab = 1.2 , font.lab = 2, cex.axis = 1.3, bty = "n", las = 1)
hist(unlist(dat[1]), xlim = xlim, breaks = seq(min_max[1],min_max[2], breaks),
ylim = ylim, col = cols[1], main = main, xlab = xlab, ylab = ylab)
hist(unlist(dat[2]), add = T, breaks = seq(min_max[1],min_max[2], breaks),
col = cols[2])
hist(unlist(dat[3]),add = T, breaks = seq(min_max[1],min_max[2], breaks),
col = cols[3])
text(paste(round(stat(unlist(dat[1])), 2)), x = stat(unlist(dat[1])),
y = find_mode_freq(round(unlist(dat[1])/(breaks*1.5))))
abline(v = stat(unlist(dat[1])), col = cols[1])
text(paste(round(stat(unlist(dat[2])), 2)), x = stat(unlist(dat[2])),
y = find_mode_freq(round(unlist(dat[2])/(breaks*1.5))))
abline(v = stat(unlist(dat[2])), col = cols[2])
text(paste(round(stat(unlist(dat[3])), 2)), x = stat(unlist(dat[3])),
y = find_mode_freq(round(unlist(dat[3])/(breaks))))
abline(v = stat(unlist(dat[3])), col = cols[3])
legend(pos_leg, legend = c("Pre", "Rev", "Non-Rev"), box.lwd = 0, fill = cols,
border = T, bg="transparent")
}
big_m <- as.matrix(df)
for (i in seq(1, 1000, 10)){
m <- matrix(big_m[i, 2:length(big_m[1, ])], 50, 20, byrow = T)
plot_net(list(m), no_bias_in_input = T, scale_factor = 0.5)
Sys.sleep(1)
}
for (i in seq(1, 1000, 10)){
m <- matrix(big_m[i, 2:length(big_m[1, ])], 50, 20, byrow = T)
plot_net(list(m), no_bias_in_input = T, scale_factor = 0.5)
Sys.sleep(1)
}
for (i in seq(1, 1000, 10)){
m <- matrix(big_m[i, 2:length(big_m[1, ])], 50, 20, byrow = T)
plot_net(list(m), no_bias_in_input = T, scale_factor = 0.5, do_no_scale = T)
Sys.sleep(1)
}
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/scripts/")
df <- read.csv("weights.csv", header = TRUE)
length(df[2, ])
length(df[, 1])
big_m <- as.matrix(df)
for (i in seq(1, 1000, 10)){
m <- matrix(big_m[i, 2:length(big_m[1, ])], 50, 20, byrow = T)
plot_net(list(m), no_bias_in_input = T, scale_factor = 0.5, do_no_scale = T)
Sys.sleep(1)
}
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/scripts/")
df <- read.csv("weights.csv", header = TRUE)
length(df[2, ])
length(df[, 1])
big_m <- as.matrix(df)
for (i in seq(1, 1000, 10)){
m <- matrix(big_m[i, 2:length(big_m[1, ])], 50, 20, byrow = T)
plot_net(list(m), no_bias_in_input = T, scale_factor = 0.5, do_no_scale = T)
Sys.sleep(1)
}
for (i in seq(1, 1000, 10)){
m <- matrix(big_m[i, 2:length(big_m[1, ])], 50, 20, byrow = T)
plot_net(list(m), no_bias_in_input = T, scale_factor = 0.5, do_no_scale = T)
Sys.sleep(1)
}
-1+1
-1+1/2
-1+1/0.5
-1+1/0.5*2
-0+1/0.5*2
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/scripts/")
df <- read.csv("weights.csv", header = TRUE)
length(df[2, ])
length(df[, 1])
big_m <- as.matrix(df)
for (i in seq(1, 1000, 10)){
m <- matrix(big_m[i, 2:length(big_m[1, ])], 50, 20, byrow = T)
plot_net(list(m), no_bias_in_input = T, scale_factor = 0.5, do_no_scale = T)
Sys.sleep(1)
}
