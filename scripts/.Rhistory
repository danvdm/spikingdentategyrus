x <- seq(-3, 3, 0.1)
y <- 2*x)#+rnorm(length(x), 0, 0.1)
plot(y)
x <- seq(-3, 3, 0.1)
y <- 2*x#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(y ~x)
fit
abline(fit)
fit <- lm(x ~y)
fit
abline(fit)
lines(p(x, fit$coefficients))
fit <- lm(x ~ y)
x <- seq(-3, 3, 0.1)
y <- 2*x#+rnorm(length(x), 0, 0.1)
plot(y)
fit <- lm(x ~ y)
fit
abline(fit)
plot(x, y)
fit <- lm(x ~ y)
fit
abline(fit)
lines(p(x, fit$coefficients))
abline(x, fit)
abline(fit)
fit <- lm(x ~ y)
fit
abline(fit)
lines(p(x, fit$coefficients))
fit <- lm(y ~ x)
fit
abline(fit)
x <- seq(-3, 3, 0.1)
y <- 2*x#+rnorm(length(x), 0, 0.1)
plot(x, y)
fit <- lm(y ~ x)
fit
abline(fit)
lines(p(x, fit$coefficients))
y <- sin(x) #+rnorm(length(x), 0, 0.1)
plot(x, y)
fit <- lm(y ~ x)
fit
abline(fit)
fit <- lm(y ~ x + I(x^2))
fit
abline(fit)
lines(p(x, fit$coefficients))
lines(function(x){1.408e-17 + 3.310e-01* x^2 + 3.671e-17 * x^3})
q <- function(x){
return(1.408e-17 + 3.310e-01* x^2 + 3.671e-17 * x^3)
}
lines(q(x))
q <- function(x){
return(1.408e-17 + 3.310e-01* x^2 + 3.671e-17 * x^3)
}
lines(q(x))
q <- function(x){
return(3.310e-01* x^2 + 3.671e-17 * x^3)
}
q(2)
lines(q(x))
lines(p(x, fit$coefficients))
plot(x, y)
fit <- lm(y ~ x + I(x^2))
fit
q <- function(x){
return(3.310e-01* x^2 + 3.671e-17 * x^3)
}
q(2)
lines(q(x))
q(x)
lines(x, q(x))
q <- function(x){
return(3.310e-01* x + 3.671e-17 * x^2)
}
q(2)
q(x)
lines(x, q(x))
x <- seq(-3, 3, 0.1)
y <- sin(x) #+rnorm(length(x), 0, 0.1)
plot(x, y)
fit <- lm(y ~ x + I(x^2))
fit
q <- function(x){
return(3.310e-01* x + 3.671e-17 * x^2)
}
lines(x, q(x))
fit <- lm(y ~ x + I(x^2))
fit
plot(q)
fit <- lm(y ~ x + I(x^2))
fit
fit <- lm(y ~ x + I(x^2) + + I(x^3))
fit
q <- function(x){
return(3.310e-01 * x + 3.671e-17 * x^2 + -9.683e-02 * x^3)
}
lines(x, q(x))
plot(q)
x <- seq(-3, 3, 0.1)
y <- sin(x) #+rnorm(length(x), 0, 0.1)
plot(x, y)
fit <- lm(y ~ x + I(x^2) + + I(x^3))
fit
q <- function(x){
return(3.310e-01 * x + 3.671e-17 * x^2 + -9.683e-02 * x^3)
}
lines(x, q(x))
fit <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4))
fit
fit <- lm(y ~ x + I(x^3) + I(x^5) + I(x^7))
fit
return(3.310e-01 * x + -1.660e-01 * x^3 + 8.037e-03 * x^5 + -1.506e-04 * x^7)
q <- function(x){
return(3.310e-01 * x + -1.660e-01 * x^3 + 8.037e-03 * x^5 -1.506e-04 * x^7)
}
lines(x, q(x))
x <- seq(-3, 3, 0.1)
y <- sin(x) #+rnorm(length(x), 0, 0.1)
plot(x, y)
fit <- lm(y ~ x + I(x^3) + I(x^5) + I(x^7))
fit
q <- function(x){
return(3.310e-01 * x + -1.660e-01 * x^3 + 8.037e-03 * x^5 -1.506e-04 * x^7)
}
lines(x, q(x))
q <- function(x){
return(3.310e-01 * x + -1.660e-01 * x^3)
}
lines(x, q(x))
f <- function(x){
return(2*x^3+3*x^2-4*x)
}
f_ <- function(x){
return(6*x^2+6*x-4)
}
x <- 3
a <- 1
plot(f, xlim = c(-3, 3), ylim = c(-10, 50))
lines(seq(-4, 4, 0.1), f_(seq(-4, 4, 0.1)))
abline(h = 0, v = 0, lt = 2, col = "gray")
points(a, f(a)+(f_(a)*(x-a)))
points(a, f_(a))
points(a, f(a))
plot(sin)
plot(sin, xlim = c(-6, 6))
factorial(3)
p <- function(x, a = 0, k = 5){
y <- sin(a)+cos(a)*(x-a)+(-sin(a)/2)*(x-a)+(-cos(a)/factorial(3))
}
plot(p)
p <- function(x, a = 0, k = 5){
y <- sin(a)+cos(a)*(x-a)+(-sin(a)/2)*(x-a)^2+(-cos(a)/factorial(3))*(x-a)^4
}
plot(p)
plot(p, xlim = c(-6, 6))
6%4
6%%4
der <- c(sin, cos, -sin, -cos)
der <- c(sin, cos, -sin, -cos)
der <- c(sin, cos, -sin, -cos)
der <- c(sin(x), cos(x), -sin(x), -cos(x))
der[1](0)
der[1]
p <- function(x, a = 0, k = 5){
y <- 0
der <- c(sin(a), cos(a), -sin(a), -cos(a))
for i in range(k){
p <- function(x, a = 0, k = 5){
y <- 0
der <- c(sin(a), cos(a), -sin(a), -cos(a))
for (i in range(k)){
y <- y + (der[k%%4]/factorial(k))*(x-a)^k
}
}
p(1)
p <- function(x, a = 0, k = 5){
y <- 0
der <- c(sin(a), cos(a), -sin(a), -cos(a))
for (i in range(k)){
y <- y + (der[k%%4]/factorial(k))*(x-a)^k
}
return(y)
}
p(1)
p(0)
p(2)
plot(p)
p <- function(x, a = 0, k = 5){
y <- sin(a)+cos(a)*(x-a)+(-sin(a)/2)*(x-a)^2+(-cos(a)/factorial(3))*(x-a)^4
}
plot(p)
plot(p, xlim = c(-6, 6))
p <- function(x, a = 0, k = 5){
y <- 0
der <- c(sin(a), cos(a), -sin(a), -cos(a))
for (i in range(k)){
y <- y + (der[k%%4]/factorial(k))*(x-a)^k
}
return(y)
}
p(1:10)
debug(p)
p <- function(x, a = 0, k = 5){
y <- 0
der <- c(sin(a), cos(a), -sin(a), -cos(a))
for (i in range(k)){
y <- y + (der[k%%4]/factorial(k))*(x-a)^k
}
return(y)
}
p(1:10)
debug(p)
p(1:10)
der[k%%4]
(x-a)
(x-a)^k
(der[k%%4]/factorial(k))
undebug(p)
e <- function(x, k = 10){
e <- rep(1, length(x))
for (i in range(length(x))){
for (j in range(k)){
e[i] <- e[i] + (1/factorial(k))*x[i]^k
}
}
}
e(1)
return(e)
e <- function(x, k = 10){
e <- rep(1, length(x))
for (i in range(length(x))){
for (j in range(k)){
e[i] <- e[i] + (1/factorial(k))*x[i]^k
}
}
return(e)
}
e(1)
exp(1)
plot(e)
8*0.4 + 6*0.6
9*0.4 + 6*0.6
8*0.4 + 6*0.6
9*0.4 + 5.5*0.6
8.5*0.4 + 5.5*0.6
8.5*0.4 + 5.6*0.6
8*0.4 + 6*0.6
f <- function(x){
exp(-x)*((1/2)*exp(x)-1/2)
}
plot(f)
plot(f, xlim = c(-10, 10))
plot(y, xlim = c(-10, 10), col = "red", lty = 2)
plot(y, xlim = c(-10, 10), col = "red", lt = 2)
y <- function(x){
exp(-x)*((1/2)*exp(x)-1/2)
}
plot(y, xlim = c(-10, 10), col = "red", lt = 2, add = TRUE)
plot(y, xlim = c(-10, 10), col = "red", lt = 2, add = TRUE, lw = 2)
f <- function(x){
exp(-x)*((1/2)*exp(x)-1/2)
}
plot(f, xlim = c(-10, 10))
y <- function(x){
exp(-x)*((1/2)*exp(x)-1/2)
}
plot(y, xlim = c(-10, 10), col = "red", lt = 2, add = TRUE, lw = 2)
8*0.4 + 6*0.6
f <- function(x){
exp(-x)*((1/2)*exp(x)-1/2)
}
plot(f, xlim = c(-10, 10))
y <- function(x){
1/2 - 1/2 * exp(-x)
}
plot(y, xlim = c(-10, 10), col = "red", lt = 2, add = TRUE, lw = 2)
f <- function(x){
exp(-x)*((1/2)*exp(x)-1/2)
}
plot(f, xlim = c(-10, 10))
y <- function(x){
1/2 - 1/2 * exp(-x)
}
plot(y, xlim = c(-10, 10), col = "red", lt = 2, add = TRUE, lw = 2)
16/4 == 4/1
4/16 == 1/4
x <- 3
y <- 5
2*x/2*y == x/y
2*x/2*y
x/y
(2*x)/(2*y) == x/y
(2*x)/(2*y) == x/y
(2*y)/(2*x) == y/x
x <- 98
y <- 5
(2*x)/(2*y) == x/y
(2*y)/(2*x) == y/x
3/4 < 5/4
4/3 > 4/5
3^-2
2/3
2/3
1/(2*3)
f <- function(x){
return(1-(1/x))
}
plot(f)
plot(f(1:10))
sum(f(1:10))
5*4*3*2
4*3*2
cos(0)
sin(0)
4^4
4^4/2
get_attributes <- function(weights_list){
list_out <- list("n_layers" = c(),
"n_neurons" = c(),
"weights" = c(),
"biases" = list())
list_out$n_layers <- length(weights_list)+1
list_out$n_neurons[1] <- nrow(weights_list[[1]])-1
list_out$n_neurons[2] <- ncol(weights_list[[1]])-1
if (length(weights_list)>1){
for (mat in c(2:(length(weights_list)))){
list_out$n_neurons <- c(list_out$n_neurons, ncol(weights_list[[mat]])-1)
}
}
for (mat in c(1:length(weights_list))){
list_out$weights[[mat]] <- weights_list[[mat]][-1, -1, drop = F]
list_out$biases[[mat]] <- list(weights_list[[mat]][, 1][-1],
weights_list[[mat]][1, ][-1])
}
return(list_out)
}
divider <- function(min, max, n){
seq(min, max, max / (n + 1))[2:(n+1)]
}
plot_net <- function(model, scale_factor = 1, min_opacity = 50,
do_no_scale = F, labels_in = NA, labels_in_2 = NA,
labels_hidden = NA, labels_out = NA, labels_out_2 = NA,
text_size = 1, min_lw = 0.1, main = NA, plot_bias = F,
no_bias_in_input = F){
x.range<-c(0,100)
y.range<-c(0,100)
max_lw = 5 * scale_factor
point_size = 4 * scale_factor
if (no_bias_in_input){
for (m in 1:length(model)){
model[[m]] <- cbind(0, rbind(0, model[[m]]))
if(plot_bias){
plot_bias <- F
print("You indicated that no bias was present - plot_bias was set to FALSE")
}
}
}
attributes <- get_attributes(model)
y_vals_layers <- rev(divider(0, 100, attributes$n_layers))
y_vals_biases <- rep(c(y_vals_layers + y_vals_layers[length(y_vals_layers)]/3)[-1],
each = 2)
xvals <- list()
for (i in 1:length(attributes$n_neurons)){
xvals[[i]] <- divider(0, 100, attributes$n_neurons[i])
}
xvals_biases_r <- c()
xvals_biases_l <- c()
for (i in 1:length(model)){
xvals_biases_r <- c(xvals_biases_r, xvals[[i]][1]/2 + xvals[[i]][length(xvals[[i]])])
xvals_biases_l <- c(xvals_biases_l, xvals[[i]][1]/2)
#xvals_biases <- c(xvals_biases, c(xvals_biases_l[i], xvals_biases_r[i]))
}
xvals_biases <- c()
for (i in 1:length(xvals_biases_l)){
xvals_biases <- c(xvals_biases, c(xvals_biases_l[i], xvals_biases_r[i]))
}
range <- range(abs(c(unlist(attributes$weights), unlist(attributes$biases))))
plot(x.range,y.range,type='n',axes=F,ylab='',xlab='', main = main)
for (i in 1:(length(model))){
for (line_end in c(1: attributes$n_neurons[i+1])){
for (line_start in c(1:attributes$n_neurons[i])){
lw = scales::rescale(abs(attributes$weights[[i]][line_start, line_end, drop = F]),
from = range,
to=c(min_lw, max_lw))
if (attributes$weights[[i]][line_start, line_end] == 0){lw = 0}
if (attributes$weights[[i]][line_start, line_end, drop = F] <= 0){
col = rgb(100, 100, 255, max = 255,
alpha = scales::rescale(abs(attributes$weights[[i]][line_start, line_end, drop = F]),
from = range,
to=c(min_opacity, 255)))
}
else
col = rgb(255, 100, 100, max = 255,
alpha = scales::rescale(attributes$weights[[i]][line_start, line_end, drop = F],
from = range,
to=c(min_opacity, 255)))
segments(x0 = xvals[[i]][line_start], y0 =  y_vals_layers[i],
x1 = xvals[[i+1]][line_end], y1 = y_vals_layers[i+1],
col = col, lw = lw)
}
}
if (plot_bias == T){
for (line_start in c(1: attributes$n_neurons[i])){
lw = scales::rescale(abs(attributes$biases[[i]][[1]][line_start]),
from = range,
to=c(1, max_lw))
if (attributes$weights[[i]][line_start, line_end] == 0){lw = 0}
if (attributes$biases[[i]][[1]][line_start]<= 0){
col = rgb(100, 100, 255, max = 255,
alpha = scales::rescale(abs(abs(attributes$biases[[i]][[1]][line_start])),
from = range,
to=c(min_opacity, 255)))
}else
col = rgb(255, 100, 100, max = 255,
alpha = scales::rescale(abs(attributes$biases[[i]][[1]][line_start]),
from = range,
to=c(min_opacity, 255)))
segments(x0 = xvals[[i]][line_start], y0 =  y_vals_layers[i],
x1 = xvals_biases_l[i], y1 = unique(y_vals_biases)[i],
col = col, lw = lw)
}
for (line_start in c(1: attributes$n_neurons[i+1])){
lw = scales::rescale(abs(attributes$biases[[i]][[2]][line_start]),
from = range,
to=c(1, max_lw))
if (attributes$biases[[i]][[2]][line_start]<= 0){
col = rgb(100, 100, 255, max = 255,
alpha = scales::rescale(abs(abs(attributes$biases[[i]][[2]][line_start])),
from = range,
to=c(min_opacity, 255)))
}else
col = rgb(255, 100, 100, max = 255,
alpha = scales::rescale(abs(attributes$biases[[i]][[2]][line_start]),
from = range,
to=c(min_opacity, 255)))
segments(x0 = xvals[[i+1]][line_start], y0 =  y_vals_layers[i+1],
x1 = xvals_biases_r[i], y1 = unique(y_vals_biases)[i],
col = col, lw = lw)
}
points(xvals_biases, y_vals_biases,
pch = 20, cex = point_size, col = "gray")
}
points(xvals[[i]], rep(y_vals_layers[i], length(xvals[[i]])),
pch = 20, cex = point_size, col = "gray")
}
points(xvals[[i+1]], rep(y_vals_layers[i+1], length(xvals[[i+1]])),
pch = 20, cex = point_size, col = "gray")
}
find_mode <- function(x) {
u <- unique(x)
tab <- tabulate(match(x, u))
return(u[tab == max(tab)][1])
}
find_mode_freq <- function(x) {
u <- unique(x)
return(max(tabulate(match(x, u))))
}
plot_freqs <- function(input, breaks = 100, xlim = c(0, 3000), main = NA, xlab = NA,
ylab = NA, ylim = c(0, 20), stat = mean, pos_leg = "top"){
dat <- list(input$pre$iterations, input$rev$iterations, input$nrev$iterations)
min_max <- c(floor(range(unlist(dat))/breaks)[1], ceiling(range(unlist(dat))/breaks)[2])*breaks
cols <- c(rgb(0.3, 1, 0.3, 0.5),
rgb(1, 0.3, 0.3, 0.5),
rgb(0.3, 0.3, 1, 0.5))
if(missing(xlim)){
xlim <- c(0, max(unlist(dat))+breaks)
}
if(missing(ylim)){
ylim <- c(0, find_mode_freq(round(unlist(dat)/(breaks)))+5)
}
par(cex.main = 1.5, mgp = c(3.5, 1, 0), cex.lab = 1.2 , font.lab = 2, cex.axis = 1.3, bty = "n", las = 1)
hist(unlist(dat[1]), xlim = xlim, breaks = seq(min_max[1],min_max[2], breaks),
ylim = ylim, col = cols[1], main = main, xlab = xlab, ylab = ylab)
hist(unlist(dat[2]), add = T, breaks = seq(min_max[1],min_max[2], breaks),
col = cols[2])
hist(unlist(dat[3]),add = T, breaks = seq(min_max[1],min_max[2], breaks),
col = cols[3])
text(paste(round(stat(unlist(dat[1])), 2)), x = stat(unlist(dat[1])),
y = find_mode_freq(round(unlist(dat[1])/(breaks*1.5))))
abline(v = stat(unlist(dat[1])), col = cols[1])
text(paste(round(stat(unlist(dat[2])), 2)), x = stat(unlist(dat[2])),
y = find_mode_freq(round(unlist(dat[2])/(breaks*1.5))))
abline(v = stat(unlist(dat[2])), col = cols[2])
text(paste(round(stat(unlist(dat[3])), 2)), x = stat(unlist(dat[3])),
y = find_mode_freq(round(unlist(dat[3])/(breaks))))
abline(v = stat(unlist(dat[3])), col = cols[3])
legend(pos_leg, legend = c("Pre", "Rev", "Non-Rev"), box.lwd = 0, fill = cols,
border = T, bg="transparent")
}
setwd("/Users/daniel/Documents/Arbeit/Uni/Thesis/spikingdentategyrus/scripts/")
df <- read.csv("weights.csv", header = TRUE)
length(df[2, ])
length(df[, 1])
big_m <- as.matrix(df)
for (i in seq(1, 1000, 10)){
m <- matrix(big_m[i, 2:length(big_m[1, ])], 50, 20, byrow = T)
plot_net(list(m), no_bias_in_input = T, scale_factor = 0.5, do_no_scale = T)
Sys.sleep(1)
}
matrix(big_m[1, 2:length(big_m[6, ])], 20, 50, byrow = T)[0:5, 0:4]
m <- matrix(big_m[i, 2:length(big_m[1, ])], 10, 10, byrow = T)
for (i in seq(1, 1000, 10)){
m <- matrix(big_m[i, 2:length(big_m[1, ])], 10, 10, byrow = T)
plot_net(list(m), no_bias_in_input = T, scale_factor = 0.5, do_no_scale = T)
Sys.sleep(1)
}
big_m <- as.matrix(df)
big_m
